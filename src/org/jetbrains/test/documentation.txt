 /========================================================\ 
|         Описание проделанной работы и инструкция         |
 \========================================================/

Совсем кратко:
  Классы были разработаны с целью обеспечить максимальную простоту и краткость использования.
  Чтобы отслеживать вызовы методов просто пропишите в них TrackController.registerCall()
  и TrackController.registerOut().
  Для Вывода на экран используйте TrackController.printLastTrace() или TrackController.printCurrentTrace().
  Для сохранения в файл нужен метод TrackController.save(filename).



************************************************************************************************************************
1. Построение дерева вызовов и управление им.

****  Класс TrackController  ****
    - Что такое? - Основной интерфейс взаимодействия. Позволяет перенаправлять сигналы о вызовах методов 
                   трекерам в зависимости от потока.
    - Методы и поля : 
      -> Поле trackers- набор конкретных экземпляров класса Tracker, содержащих дерево отлеживаемых
         вызовов для каждого потока.
      -> Метод (public) registerCall() - Пишется в начале метода. Отправляет в трекеру потока сигнал о том,
         что метод был вызван. Имя метода вычисляется из ...getStackTrace().
      -> Метод (public) registerOut() - Пишется в конце метода. Отправляет трекеру потока сообщение о том,
         что метод был завершен. Имя метода вычисляется из ...getStackTrace().

****  Класс TrackerPool  ****
    - Что такое? - По сути, просто набор Трекеров, но именно эта структура
                   используется в классах TrackController и XMLSaver/XMLLoader.
    - Методы и поля : 
      -> (public) check(String name) - Проверяет, есть ли трекер с таким именем.
      -> (public) get(String name) - Возвращает Tracker по имени или null, если такого нет.
      -> (public) get(String name, true) - Возвращает Tracker по имени или созает новый, если такого нет.
      -> (public) create(String name) - Создает и возвращает новый трекер с таким именем.
          Если такой трекер уже был, вернет существующий.
      -> (public) create(String name, true) - Создает и возвращает новый трекер с таким именем.
          Если такой трекер уже был, заменит его.
      -> (public) getNames() - Возвращает Set из имен трекеров.

****  Класс Tracker  ****
    - Что такое? - Оперирует с деревом вызовов отслеживаемых методов. С помощью
                   распределения по потокам в классе TrackController, создается для каждого потока отдельно.
    - Методы и поля : 
      -> Поле (TrackUnit) root - корневой элемент дерева вызовов. Является отображением первого вызванного метода.
      -> Поле (TrackUnit) current - текущее положение в дереве вызовов. Является отображением метода,
         исполняемого в данный момент.
      -> Метод (public) registerCall(methodName) - Перемещает ссылку current на потомка, отображающего
         соответствующее обращение к методу и увеличивает счетчик вызовов.
      -> Метод (public) registerOut() - Перемещает ссылку current на предка.
         Если это корневой вызов, вызывает RegisterExit().
      -> Метод (private) RegisterExit() - Когда самый первый вызванный метод (из которого были вызваны все
         остальные методы дерева) заканчивает свою работу, ссылка root сохраняется в Поле exRoots,
         и обnullяется. Это обозначает, что дерево вызовов завершено.

**** Класс TrackUnit ****
    - Что такое? - Элемент дерева вызовов, другими словами, отображение вызова отслеживаемого метода в дереве.
    - Методы и поля :
      -> Поле invoker - Элемент-родитель.
      -> Метод (public) getInvoker() - Возвращает прямого родителя.
      -> Поле invoked - Список дочерних элементов.
      -> Метод (public) getInvoked(String methodName) - Возвращает прямого потомка по имени метода.
      -> Поле callCount - Количество раз, которое мы побывали в этой точке дерева.
      -> (Дополнительно) Поле internalDepth - максимальное расстояние от данного элемента до самого дальнего потомка.
      -> (Дополнительно) Поле externalHeight - высота до корня дерева.



************************************************************************************************************************
2. Вывод в консоль.


**** Структура вывода дерева в консоль ****
    
    |\-- S1{ N / M1, K1 }
    | |>-- S11{ N+1 / M11, K11 }
    | |\-- S12{ N+1 / M12, K12 }
    | | |>-- S121 { N+2 / M121, K121 }
    |>-- S2{ N / M2, K2 }
    
    S - Имя метода. S11 и S12 вызваны из S1, S121 вызван из S12
    N - Количество шагов наружу до корня.
    M - Количество шагов до самого дальнего потомка. 
    K - Количество раз, которое побывали в этом месте дерева вызовов.

****  Класс TrackController  ****
    - Методы : 
      -> Метод (public) printCurrentTrack() - Выводит в консоль текущее работающее 
         дерево вызовов для потока, из которого вызван.
      -> Метод (public) printLastTrack() - Выводит в консоль последнее завершенное 
         дерево для потока, из которого вызван.
    
****  Класс Tracker  ****
    - Методы : 
      -> Метод (public) printCurrentTrack() - Выводит в консоль текущее работающее дерево.
      -> Метод (public) printLastTrack() - Выводит в консоль последнее завершенное дерево.
      -> Метод (public) printAllTracks() - Выводит в консоль все деревья, включая текущее.

**** Класс TrackUnit ****
    - Методы : 
      -> Метод (public) printTrack(String placeholder) - Выводит себя и потомков (рекурсивно) с переданным отступом. 
         placeholder - отступ, добавляемый каждм родителем чтобы обозначить иерархию графически.
      -> Метод (public) printTrack() == printTrack("");



************************************************************************************************************************
2.1 Информацию о дереве вызовов хочется сохранить в файл.
    Какие свойства могут быть желательны для формата такого файла?
    Решено использовать формат xml. Он позволяет легко сохранить дерево в файл "родными"
    средствами и считать его из другого приложения.

**** Пример выходного XML файла ****
      Аттрибут "counter" обозначает количество раз, которое мы побывали в этом месте дерева.
  
      <root>                                           - Корень документа
        <tracker name="thread1">                       - Трекер. Деревья вызовов.

            <call counter="1" method="name123">        - Первый вызванный корневой метод
              <call counter="2" method="name375">      - Метод name123 вызвал метод name375
                <call counter="2" method="name0"/>     - Метод name375 вызвал метод name123
                                                       - А метод name123 больше никого не вызывал
              <call>                                   - Конец списка вызовов из метода name0
            </call>                                    - Конец дерева вызовов первого корневого метода

            <call counter="1" method="name912">        - Второй вызванный корневой метод name912
              <call counter="2" method="name414"/>     - Метод name414 был вызван из метода name912 2 раза
              <call counter="1" method="name561"/>     - Метод name561 был вызван из метода name912 1 раза
            </call>                                    - Конец списка вызово метода name912
          </call>                                      - Конец дерева вызовов корневого метода name 912

        </tracker>                                     - Конец информации трекера
        <tracker ... />                                - Другие трекеры. (Для других потоков).
      </root>                                          - Конец документа



************************************************************************************************************************
2.2 Реализовать задачу 1 с записью в файл вместо вывода в консоль.
    Решено с помощью XML DOM

****  Класс TrackController  ****
    - Что такое? - Позволяет легко соханить результаты отслеживания в файл xml.
    - Методы и поля : 
    -> Метод (public) save(String filename) - Сохраняет внутренний TrackerPool в файл с помощью XMLSaver.

**** Класс Tracker  ****
    - Методы и поля : 
    -> метод (public) putToXMLElement (Element element) - порождает у переданного элемента дочерний
    и сохраняет туда прикрепленное к root дерево.
    
**** Класс TrackUnit ****
    - Методы и поля : 
    -> метод (public) putToXMLElement (Element element) - рекурсивно сохраняет себя и потомков в элемент дом-дерева.



************************************************************************************************************************
2.3 Реализовать чтение этого файла из другого приложения.
    Решено с помощью XML StAX имитировать вызовы на новом TracerPool.
    На выходе получается точная копия TracerPool-a, который был сохранен.

    
**** Класс XMLLoader ****
    - Что такое? - Класс, позволяющий прочитать XML-файл с помощью STAX-парсера и построить новый ThreadPool.
    - Методы и поля : 
    -> Метод (public) load(String filename) - Основной метод класса. Парсит файл и
       возвращает готовый ThreadPool на выходе.



************************************************************************************************************************
2.4. Дополнительно.

**** Класс XMLUtils ****
    - Что такое? - Класс, упрощающий создание объектов XML-парсеров.
    - Методы : 
    -> Метод (public) getNewDocument() - Возвращает новый DOM Document.
    -> Метод (public) saveDocument() - Сохраняет Document в файл.
    -> Метод (public) getNewTransformer() - Возвращает новый Transformer.
    -> Метод (public) getNewReader(String filename) - возвращает новый XMLStreamReader для данного файла

************************************************************************************************************************